------
CREATE
------

create database update_statistic;

create table uzivatele (u_id int not null auto_increment, jmeno varchar(255) not null default "", primary key (u_id));

alter table uzivatele add vek int not null default 0;

------
INSERT
------

insert into uzivatele (jmeno, vek) values ('Petr', 15), ('Tomas', 20), ('Lukas', 18);

------
SELECT
------

select count(*) veky from (select distinct vek from uzivatele);

----
VIEW
----

create view v_veky as select count(vek) pocet, distinct vek from uzivatele;

--------
FUNCTION
--------

delimiter $$

create function f_count_vek (
    i_vek int(11)
)
returns varchar(255)
deterministic
begin
    set @i_vek = age;
    set @ret = 0;
    select count(*) into @ret from uzivatele where vek= @i_vek;
    return @pocet;
end$$

delimiter ;

---------
PROCEDURE
---------

delimiter $$

create procedure p_uzivatel_update (
    in n_jmeno varchar(255),
    in n_vek int(11)
)
begin
    declare c_finished int default 0;
    declare user_age varchar(255) default "";
    declare sql_query text default "create or replace view v_veky as select 'pocet_uzivatelu' AS statistika";
    declare cur_user cursor for select distinct vek from uzivatele union select n_vek as vek order by asc;
    open cur_user;
    cursor_loop: loop
        fetch cur_user into user_age;
        if c_finished = 1 then
            leave cursor_loop;
        end if;
        set sql_query = concat(sql_query,", f_count_vek(",user_age, ") as vek_", user_age);
    end loop cursor_loop;
    close cur_user;

    select sql_query as "";
    sel @sql_query = (select sql_query);

    prepare dynamic_statement from @sql_query;
    execute dynamic_statement;
    deallocate prepare dynamic_statement;

    inser into uzivatele (jmeno, vek) values (n_jmeno, n_vek);
end$$

delimiter ;